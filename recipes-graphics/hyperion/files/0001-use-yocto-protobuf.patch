diff --git a/dependencies/CMakeLists.txt b/dependencies/CMakeLists.txt
index 26dd96c..73d7c64 100644
--- a/dependencies/CMakeLists.txt
+++ b/dependencies/CMakeLists.txt
@@ -11,32 +11,8 @@ if(ENABLE_WS281XPWM)
 		external/rpi_ws281x/rpihw.c)
 endif()
 
-set(USE_SYSTEM_PROTO_LIBS OFF CACHE BOOL "use protobuf library from system")
-
-if (USE_SYSTEM_PROTO_LIBS)
-	find_package(Protobuf REQUIRED)
-	include_directories(${PROTOBUF_INCLUDE_DIRS})
-else ()
-	set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared protobuf library")
-	add_subdirectory(external/protobuf)
-
-	if(CMAKE_CROSSCOMPILING)
-		# when crosscompiling import the protoc executable targets from a file generated by a native build
-		option(IMPORT_PROTOC "Protoc export file (protoc_export.cmake) from a native build" "IMPORT_PROTOC-FILE_NOT_FOUND")
-		include(${IMPORT_PROTOC})
-	else()
-		# export the protoc compiler so it can be used when cross compiling
-		export(TARGETS protoc_compiler FILE "${CMAKE_BINARY_DIR}/protoc_export.cmake")
-	endif()
-
-	# define the include for the protobuf library at the parent scope
-	set(PROTOBUF_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/protobuf/src")
-	set(PROTOBUF_INCLUDE_DIRS ${PROTOBUF_INCLUDE_DIRS} PARENT_SCOPE)
-
-	# define the protoc executable at the parent scope
-	get_property(PROTOBUF_PROTOC_EXECUTABLE TARGET protoc_compiler PROPERTY LOCATION)
-	set(PROTOBUF_PROTOC_EXECUTABLE ${PROTOBUF_PROTOC_EXECUTABLE} PARENT_SCOPE)
-endif()
+find_package(Protobuf REQUIRED)
+include_directories(${PROTOBUF_INCLUDE_DIRS})
 
 message(STATUS "Using protobuf compiler: " ${PROTOBUF_PROTOC_EXECUTABLE})
 
